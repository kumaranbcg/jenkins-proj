pipeline {
    agent any
    environment {
        BRANCH_NAME = "${GIT_BRANCH.replaceAll('origin/', '')}"
        AWS_ECR_REGION = 'ap-south-1'
        AWS_ECS_SERVICE = 'myservice'
        AWS_ECS_TASK_DEFINITION = 'mytask'
        AWS_ECS_COMPATIBILITY = 'FARGATE'
        AWS_ECS_NETWORK_MODE = 'awsvpc'
        AWS_ECS_CPU = '256'
        AWS_ECS_MEMORY = '512'
        AWS_ECS_CLUSTER = 'ch-dev'
        AWS_ECS_EXECUTION_ROL = 'arn:aws:iam::839316227584:role/ecsTaskExecutionRole'
        taskDefinition = 'ji'
    }
    stages {
        stage("Env Variables") {
            steps {
                script {
					env.ECRREPOURI = "839316227584.dkr.ecr.ap-south-1.amazonaws.com/idp-vca-service"
					env.DOCKERPUSHURL = "https://839316227584.dkr.ecr.ap-south-1.amazonaws.com/idp-vca-service"
					sh "cd ${env.WORKSPACE}"
					echo "branch name : ${env.BRANCH_NAME}"
					env.COMMIT = sh(returnStdout: true, script: 'echo $(git rev-parse --short HEAD)').trim()
					env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
					env.GIT_AUTHOR = sh (script: 'git log -1 --pretty=%cn ${GIT_COMMIT}', returnStdout: true).trim()                    
                    env.TAG = "${env.BRANCH_NAME}" + "-" + "${BUILD_NUMBER}"
					echo "Tag : ${env.TAG}"
                    env.IMAGE = "${env.ECRREPOURI}" + ":" + "${env.TAG}"
                    
                } //script end           
            } //steps end
        } // env Variables stage end
        
            stage("Docker build") {
                steps {
                    sh """ 
                        docker build . -t ${env.ECRREPOURI}:${env.TAG} -f ${env.WORKSPACE}/deployment/Dockerfile
                    """
                } // steps end
            } // docker build stage end

        stage("Docker push to AWS ECR") {
            steps
              {
                  script {
                    withAWS(region: 'ap-south-1', credentials: 'aws-creds') {
                        sh "${ecrLogin()}"
                        docker.image("${env.IMAGE}").push()
                        sh "docker rmi ${env.IMAGE} | true"
                    }
                }
            } // steps end
        } //  docker push stage end

        // stage("Replacing Yaml Variables") {
        //     steps {
        //         sh """      
        //             sed -i "s|CONTAINER_IMAGE|${env.IMAGE}|g" ${env.FILENAME}
        //             sed -i "s|BRANCH_NAMESPACE|${env.BRANCH_NAME}|g" ${env.FILENAME}
        //         """
        //     } //steps end
        // } //Replacing yaml Variables stage end

        stage('Deploy to ECS') {
            steps{
                 script {
                     withAWS(region: 'ap-south-1', credentials: 'aws-creds') {
                         sh '''
                            TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition mytask --region ap-south-1)
                            TASK_LIST=$(aws ecs list-tasks --cluster mycluster --desired-status RUNNING --family mytask)
                            OLD_TASK_ID=$(echo $TASK_LIST | jq -r '.taskArns[0]' | awk -F'/' '{print $3}')
                            aws ecs stop-task --region ap-south-1 --cluster mycluster --task $OLD_TASK_ID
                            NEW_TASK_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE ${env.IMAGE} '.taskDefinition' | jq '.containerDefinitions[0].image = ${env.IMAGE}')
                            NEW_TASK_DEFINTIION=$(echo $NEW_TASK_DEFINTIION | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
                            NEW_TASK_INFO=$(aws ecs register-task-definition --region $AWS_DEFAULT_REGION --cli-input-json "$NEW_TASK_DEFINTIION")
                            NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
                            aws ecs update-service --cluster mycluster --service myservice --task-definition mytask:${NEW_REVISION}
                            echo $BRANCH_NAME
                         '''
                     }
                }
            }
        }
    } //stages end
    post { 
        always { 
            deleteDir()
        }
    }
} //pipeline end
// aws ecs register-task-definition --family mytask --execution-role-arn arn:a ws:iam::839316227584:role/ecsTaskExecutionRole --requires-compatibilities FARGATE --network-mode awsvpc --cpu 256 --memory 512 --container-definitions "[{ \"name\":\"mytask\",\"image\":\"839316227584.dkr.ecr.ap-south-1.a mazonaws.com:idp-vca-service:main-28}]"
// /usr/local/bin/aws ecs describe-task-definition --task-definition mytask | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/,//'
// aws ecs register-task-definition --cli-input-json file://imagedefinitions.json
// /usr/local/bin/aws ecs update-service --cluster mycluster --service myservice --task-definition mytask:14

// family, taskRoleArn, executionRoleArn, networkMode, containerDefinitions, volumes, placementConstraints, requiresCompatibilities, cpu, memory, tags, pidMode, ipcMode, proxyConfiguration, inferenceAccelerators, ephemeralStorage
// def taskDefinition = sh(script: "aws ecs describe-task-definition --task-definition mytask --region ap-south-1", returnStdout: true)
// def newtaskDefinition = sh(script: "echo ${taskDefinition} | jq --arg IMAGE ${env.IMAGE} '.taskDefinition | .containerDefinitions[0].image = ${env.IMAGE} | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)", returnStdout: true)
// def newTaskInfo = sh(script: "aws ecs register-task-definition --region ap-south-1 --cli-input-json ${newtaskDefinition}", returnStdout: true)
// def newRevision = sh(script: "echo ${newTaskInfo} | jq '.taskDefinition.revision'", returnStdout: true)
// sh "aws ecs update-service --cluster mycluster --service myservice --task-definition mytask:${newRevision}"

