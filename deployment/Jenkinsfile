pipeline {
    agent any
    environment {
        BRANCH_NAME = "${GIT_BRANCH.replaceAll('origin/', '')}"
        AWS_CRED_ID = "aws-creds"
        AWS_ECR_REGION = 'ap-south-1'
        AWS_ECS_CLUSTER = 'mycluster'
        AWS_ECS_SERVICE = 'myservice'
        AWS_ECS_TASK_DEFINITION = 'mytask'
        ECR_REPO_URI = "839316227584.dkr.ecr.ap-south-1.amazonaws.com/myrepo"
    }
    stages {
        stage("Env Variables") {
            steps {
                script {
					sh "cd ${env.WORKSPACE}"
					echo "Branch name : ${env.BRANCH_NAME}"
					env.COMMIT = sh(returnStdout: true, script: 'echo $(git rev-parse --short HEAD)').trim()
					env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
					env.GIT_AUTHOR = sh (script: 'git log -1 --pretty=%cn ${GIT_COMMIT}', returnStdout: true).trim()                    
                    env.TAG = "${env.BRANCH_NAME}" + "-" + "${BUILD_NUMBER}"
					echo "Tag : ${env.TAG}"
                    env.IMAGE = "${env.ECR_REPO_URI}" + ":" + "${env.TAG}"
                } //script end           
            } //steps end
        } // env Variables stage end
        
            stage("Docker build") {
                steps {
                    sh """ 
                        docker build . -t ${env.ECR_REPO_URI}:${env.TAG} -f ${env.WORKSPACE}/deployment/Dockerfile
                    """
                } // steps end
            } // docker build stage end

        stage("Docker push to AWS ECR") {
            steps
              {
                  script {
                    withAWS(region: "${AWS_ECR_REGION}", credentials: "${AWS_CRED_ID}") {
                        sh "${ecrLogin()}"
                        docker.image("${env.IMAGE}").push()
                        sh "docker rmi ${env.IMAGE} | true"
                    }
                }
            } // steps end
        } //  docker push stage end

        stage('Deploy to ECS') {
            steps {
                 script {
                     withAWS(region: "${AWS_ECR_REGION}", credentials: "${AWS_CRED_ID}") {
                         sh """
                                set +x
                                TASK_DEFINITION=\$(aws ecs describe-task-definition --task-definition \${AWS_ECS_TASK_DEFINITION} --region \${AWS_ECR_REGION})
                                TASK_LIST=\$(aws ecs list-tasks --cluster \${AWS_ECS_CLUSTER} --desired-status RUNNING --family \${AWS_ECS_TASK_DEFINITION})
                                OLD_TASK_ID=\$(echo \${TASK_LIST} | jq -r '.taskArns[0]' | awk -F'/' '{print \$3}')
                                aws ecs stop-task --cluster \${AWS_ECS_CLUSTER} --task \${OLD_TASK_ID} --region \${AWS_ECR_REGION}
                                NEW_TASK_DEFINTIION=\$(echo \${TASK_DEFINITION} | jq '.taskDefinition' | jq --arg IMAGE_DATA "\$IMAGE" '.containerDefinitions[0].image = \$IMAGE_DATA' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
                                NEW_TASK_INFO=\$(aws ecs register-task-definition --region \${AWS_DEFAULT_REGION} --cli-input-json "\${NEW_TASK_DEFINTIION}")
                                NEW_REVISION=\$(echo \${NEW_TASK_INFO} | jq '.taskDefinition.revision')
                                aws ecs update-service --cluster \${AWS_ECS_CLUSTER} --service \${AWS_ECS_SERVICE} --task-definition \${AWS_ECS_TASK_DEFINITION}:\${NEW_REVISION}
                            """
                     }
                }
            } // steps end
        } // Deploy to ECS ends
    } //stages end
    post { 
        always { 
            deleteDir() // Clears Workspace
        }
    }
} // pipeline end


