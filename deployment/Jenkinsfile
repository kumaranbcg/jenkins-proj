pipeline {
    agent any
    environment {
        BRANCH_NAME = "${GIT_BRANCH.replaceAll('origin/', '')}"
    }
    stages {
        stage("Env Variables") {
            steps {
                script {
					// env.ECRREPOURI = "707200824006.dkr.ecr.ap-south-1.amazonaws.com/idp-vca-service"
					// env.DOCKERPUSHURL = "https://707200824006.dkr.ecr.ap-south-1.amazonaws.com/idp-vca-service"
					// sh "cd ${env.WORKSPACE}"
					echo "branch name : ${env.BRANCH_NAME}"
					env.COMMIT = sh(returnStdout: true, script: 'echo $(git rev-parse --short HEAD)').trim()
					env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
					env.GIT_AUTHOR = sh (script: 'git log -1 --pretty=%cn ${GIT_COMMIT}', returnStdout: true).trim()                    
                    env.TAG = "${env.BRANCH_NAME}" + "-" + "${BUILD_NUMBER}"
					echo "Tag : ${env.TAG}"
                    env.IMAGE = "vcalatest" + ":" + "${env.TAG}"
                    env.FILENAME = "deployment/idp-vca-deployment.yml"
                    
                } //script end           
            } //steps end
        } // env Variables stage end
        
        stage("Docker build") {
            steps {
                sh """ 
                    docker build . -t vcalatest:${env.TAG} -f ${env.WORKSPACE}/deployment/Dockerfile
                """
            } // steps end
        } // docker build stage end

        // stage("Docker push to AWS ECR") {
        //     steps
        //       {
        //         script
        //          {
        //              sh("eval \$(aws2 ecr get-login --no-include-email)")
        //              docker.withRegistry("${env.DOCKERPUSHURL}", "ecr:ap-south-1:aws-creds") {
        //              docker.image("${env.IMAGE}").push()
        //              sh "docker rmi ${env.IMAGE} | true"
        //             } //docker withRegistry end
        //         } //script end
        //     } // steps end
        // } //  docker push stage end

        // stage("Replacing Yaml Variables") {
        //     steps {
        //         sh """      
        //             sed -i "s|CONTAINER_IMAGE|${env.IMAGE}|g" ${env.FILENAME}
        //             sed -i "s|BRANCH_NAMESPACE|${env.BRANCH_NAME}|g" ${env.FILENAME}
        //         """
        //     } //steps end
        // } //Replacing yaml Variables stage end

        // stage("k8S file deployment") {
        //     steps {
        //        script{                 
        //                 withKubeConfig(caCertificate: '', clusterName: 'tnrtpprod', contextName: '', credentialsId: "${env.BRANCH_NAME}", namespace: '', serverUrl: 'https://CB2C3AE7FB9F916362DEAE6B0B9690AD.sk1.ap-south-1.eks.amazonaws.com') {
        //                 sh "kubectl apply -f ${WORKSPACE}/${env.FILENAME}"
		// 				//sh "kubectl get svc -n tnrtp-qa"
        //              }  // withKubeConfig end 
                    
        //         } //script end
        //     } // steps end
        // } //  k8S deployment file deployment stage end
    } //stages end
} //pipeline end